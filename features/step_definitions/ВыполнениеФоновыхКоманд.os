// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd
#Использовать "../.."
#Использовать asserts

#Область ОписаниеПеременных

Перем БДД; //контекст фреймворка 1bdd
Перем Лог;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯОчищаюПараметрыФоновыхКомандВКонтексте");
	ВсеШаги.Добавить("ЯДобавляюФоновуюКоманду");
	ВсеШаги.Добавить("ЯВыполняюФоновыеКомандыСТаймаутомЗавершенияВМиллисекунд");
	ВсеШаги.Добавить("КодВозвратаФоновыхКомандРавен");
	ВсеШаги.Добавить("ЕстьОшибкиВыполненияФоновыхКоманд");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	
КонецПроцедуры


//Я добавляю фоновую команду "oscript"
Процедура ЯДобавляюФоновуюКоманду(Знач ИмяКоманды) Экспорт

	Команда = ПолучитьКомандуИзКонтекста(ИмяКоманды);
	Лог.Отладка("Добавляю фоновую команду " + ПолнаяСтрокаЗапуска(Команда));

	КоллекцияФоновыхЗаданий = КоллекцияФоновыхЗаданий(Ложь);
	
	КоллекцияФоновыхЗаданий.Вставить(Команда, ИмяКоманды);
	БДД.СохранитьВКонтекст("КоллекцияФоновыхЗаданий", КоллекцияФоновыхЗаданий);	

КонецПроцедуры

//я выполняю фоновые команды с таймаутом завершения в 5 миллисекунд
Процедура ЯВыполняюФоновыеКомандыСТаймаутомЗавершенияВМиллисекунд(Знач ТаймаутВМиллисекундах) Экспорт

	КоллекцияФоновыхЗаданий = КоллекцияФоновыхЗаданий();

	Для каждого КлючЗначение Из КоллекцияФоновыхЗаданий Цикл		
		Команда = КлючЗначение.Ключ;
		ИмяКоманды = КлючЗначение.Значение;

		Лог.Отладка("Запускаю фоновую команду " + ПолнаяСтрокаЗапуска(Команда));
		ФоновыеКоманды.ЗапуститьКоманду(Команда);
	
	КонецЦикла;

	Успешно = ФоновыеКоманды.ОжидатьЗавершения(ТаймаутВМиллисекундах);

	РезультатыВыполнения = РезультатыВыполнения(Ложь);
	РезультатыВыполнения.Вставить("Успешно", Успешно);
	Лог.Отладка("Успешно " + Успешно);
	
	ЗапущенныеКоманды = ФоновыеКоманды.ЗапущенныеКоманды();
	РезультатыВыполнения.Вставить("ЗапущенныеКоманды", ЗапущенныеКоманды);
	НеЗавершенныеКоманды = РезультатыВыполнения.Получить("НеЗавершенныеКоманды");
	НеверныеКоманды = РезультатыВыполнения.Получить("НеверныеКоманды");

	Для каждого КлючЗначение Из ЗапущенныеКоманды Цикл		
		Команда = КлючЗначение.Ключ;
		ОписаниеПроцесса = КлючЗначение.Значение;
		СвойстваПроцесса = ОписаниеПроцесса.Свойства;
		Лог.Отладка("Команда %1,
		|код возврата %2
		|завершен %3", ПолнаяСтрокаЗапуска(Команда), СвойстваПроцесса.КодВозврата, СвойстваПроцесса.Завершен);
			
		Если Не СвойстваПроцесса.Завершен Тогда
			НеЗавершенныеКоманды.Добавить(Команда);
		ИначеЕсли СвойстваПроцесса.КодВозврата <> 0 Тогда
			НеверныеКоманды.Вставить(Команда, СвойстваПроцесса.КодВозврата);
		КонецЕсли;
	
	КонецЦикла;

	БДД.СохранитьВКонтекст("РезультатыВыполненияФоновыхЗаданий", РезультатыВыполнения);	
	
КонецПроцедуры

//Код возврата фоновых команд равен 0
Процедура КодВозвратаФоновыхКомандРавен(Знач ОжидаемыйКодВозврата) Экспорт

	РезультатыВыполнения = РезультатыВыполнения();
	НеверныеКоманды = РезультатыВыполнения.Получить("НеверныеКоманды");

	СообщениеОшибки = "";
	Для каждого КлючЗначение Из НеверныеКоманды Цикл
		Команда = КлючЗначение.Ключ;
		КодВозврата = КлючЗначение.Значение;
		
		Если КодВозврата <> ОжидаемыйКодВозврата Тогда
			СообщениеОшибки  = СообщениеОшибки  + 
				СтрШаблон("Код возврата команды <%1> не равен ожидаемому коду <%2> - 
				|команда %3", КодВозврата, ОжидаемыйКодВозврата, ПолнаяСтрокаЗапуска(Команда));
		КонецЕсли;
	КонецЦикла;

	Если Не ПустаяСтрока(СообщениеОшибки) Тогда
		ВызватьИсключение СообщениеОшибки;
	КонецЕсли;

КонецПроцедуры

//есть ошибки выполнения фоновых команд
//| Не завершена команда - oscript |
Процедура ЕстьОшибкиВыполненияФоновыхКоманд(Знач ТаблицаОшибок) Экспорт
	РезультатыВыполнения = РезультатыВыполнения();
	НеЗавершенныеКоманды = РезультатыВыполнения.Получить("НеЗавершенныеКоманды");

	СообщениеОшибки = "";
	Для каждого Команда Из НеЗавершенныеКоманды Цикл
		СообщениеОшибки  = СообщениеОшибки  + СтрШаблон("Не завершена команда - %1",
			ПолнаяСтрокаЗапуска(Команда));
	КонецЦикла;

	ПроверитьСтрокуНаВхождениеПодстрокИзТаблицы(СообщениеОшибки, ТаблицаОшибок);

КонецПроцедуры

//Я очищаю параметры фоновых команд в контексте
Процедура ЯОчищаюПараметрыФоновыхКомандВКонтексте() Экспорт

	КоллекцияФоновыхЗаданий = КоллекцияФоновыхЗаданий(Ложь);
	БДД.СохранитьВКонтекст("КоллекцияФоновыхЗаданий", КоллекцияФоновыхЗаданий);	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоллекцияФоновыхЗаданий(Знач ВыдаватьИсключениеЕслиНеНайдено = Истина)

	КоллекцияФоновыхЗаданий = БДД.ПолучитьИзКонтекста("КоллекцияФоновыхЗаданий");
	Если КоллекцияФоновыхЗаданий = Неопределено Тогда
		Если ВыдаватьИсключениеЕслиНеНайдено Тогда
			ВызватьИсключение "Не задано фоновых заданий в сценарии";
		КонецЕсли;
		КоллекцияФоновыхЗаданий = Новый Соответствие(); 
	КонецЕсли;

	Возврат КоллекцияФоновыхЗаданий;

КонецФункции

Функция РезультатыВыполнения(Знач ВыдаватьИсключениеЕслиНеНайдено = Истина)

	РезультатыВыполнения = БДД.ПолучитьИзКонтекста("РезультатыВыполненияФоновыхЗаданий");
	Если РезультатыВыполнения = Неопределено Тогда
		Если ВыдаватьИсключениеЕслиНеНайдено Тогда
			ВызватьИсключение "Фоновые задания еще не выполнялись";
		КонецЕсли;
	
		РезультатыВыполнения = Новый Соответствие(); 
		РезультатыВыполнения.Вставить("Успешно", Ложь);
		РезультатыВыполнения.Вставить("ЗапущенныеКоманды", Новый Соответствие());
		РезультатыВыполнения.Вставить("НеЗавершенныеКоманды", Новый Массив);
		РезультатыВыполнения.Вставить("НеверныеКоманды", Новый Соответствие());
	
	КонецЕсли;

	Возврат РезультатыВыполнения;

КонецФункции

Функция ПолучитьКомандуИзКонтекста(Знач ИмяКоманды)

	КлючКонтекста = КлючКоманды(ИмяКоманды);
	Команда = БДД.ПолучитьИзКонтекста(КлючКонтекста);

	Если Не ЗначениеЗаполнено(Команда) Тогда
		Команда = Новый Команда;
		Команда.УстановитьСтрокуЗапуска(ИмяКоманды);
		БДД.СохранитьВКонтекст(КлючКонтекста, Команда);
	КонецЕсли;

	Возврат Команда;
КонецФункции

//TODO дубль кода с 1bdd::ВыполнениеКоманд.os
Функция КлючКоманды(Знач ИмяКоманды)
	Возврат "Команда-" + ИмяКоманды;
КонецФункции

Функция ПолнаяСтрокаЗапуска(Знач Команда)
	Возврат Команда.СтрокаЗапуска();
КонецФункции

// TODO перенести в библиотеку asserts
//TODO дубль кода с 1bdd::ВыполнениеКоманд.os
Процедура ПроверитьСтрокуНаВхождениеПодстрокИзТаблицы(Знач СтрокаГдеИщем, Знач ТаблицаИскомыхПодстрок)
	СтрокаРасхождений = "";
	Для каждого ЧтоИщем Из ТаблицаИскомыхПодстрок Цикл
		СтрокаЧтоИщем = ЧтоИщем[0];
		СтрокаЧтоИщем = ЗаменитьШаблоныВПараметрахКоманды(СтрокаЧтоИщем);

		Если Найти(СтрокаГдеИщем, СтрокаЧтоИщем) = 0 Тогда
			СтрокаРасхождений = СтрШаблон("%1%3    Не найдена подстрока <%2>", СтрокаРасхождений, СтрокаЧтоИщем,
				Символы.ПС);
		КонецЕсли;
	КонецЦикла;
	Если Не ПустаяСтрока(СтрокаРасхождений) Тогда
		СтрокаРасхождений = СтрШаблон("Не нашли одну из подстрок таблицы:%3%2%3 в строке:%3%1 ",
			СтрокаГдеИщем, СтрокаРасхождений, Символы.ПС);
		Ожидаем.Что(Истина, СтрокаРасхождений).ЭтоЛожь();
	КонецЕсли;
КонецПроцедуры

// TODO перенести в библиотеку asserts
//TODO дубль кода с 1bdd::ВыполнениеКоманд.os
Процедура ПроверитьСтрокуНаОтсутствиеПодстрокИзТаблицы(Знач СтрокаГдеИщем, Знач ТаблицаИскомыхПодстрок)
	СтрокаРасхождений = "";
	Для каждого ЧтоИщем Из ТаблицаИскомыхПодстрок Цикл
		СтрокаЧтоИщем = ЧтоИщем[0];
		СтрокаЧтоИщем = ЗаменитьШаблоныВПараметрахКоманды(СтрокаЧтоИщем);

		Если Найти(СтрокаГдеИщем, СтрокаЧтоИщем) <> 0 Тогда
			СтрокаРасхождений = СтрШаблон("%1%3    Найдена подстрока <%2>", СтрокаРасхождений, СтрокаЧтоИщем,
				Символы.ПС);
		КонецЕсли;
	КонецЦикла;
	Если Не ПустаяСтрока(СтрокаРасхождений) Тогда
		СтрокаРасхождений =
			СтрШаблон("Ожидали, что не найдем одну из подстрок таблицы, но одна из них найдена:%3%2%3 Строка, где искали:%3%1",
				СтрокаГдеИщем, СтрокаРасхождений, Символы.ПС);
		Ожидаем.Что(Истина, СтрокаРасхождений).ЭтоЛожь();
	КонецЕсли;
КонецПроцедуры

Функция ЗаменитьШаблоныВПараметрахКоманды(Знач ПараметрыКоманды)
	Рез = СтрЗаменить(ПараметрыКоманды, "<КаталогПроекта>", БДД.КаталогПроверяемогоПроекта());
	Рез = СтрЗаменить(Рез, "<РабочийКаталог>", БДД.ПолучитьИзКонтекста("РабочийКаталог"));
	Возврат Рез;
КонецФункции

Функция ИмяЛога() Экспорт
	Возврат "oscript.lib.commands";
КонецФункции

#КонецОбласти

Лог = Логирование.ПолучитьЛог(ИмяЛога());
